import java.io.*;
import java.util.*;
import java.util.stream.*;

class Main {
	
	public static void main(String[] args) {
		
		System.out.println("Calculation of Internsity-Duration-Frequency curves.");
		int stepMinutes = 10;
		int indexofTof = 630; //582;
		
		// initializing double array
		List<Double> arr = GetObservedRainfallData();
		
		IdfCalculator idf = new IdfCalculator(stepMinutes, arr, indexofTof);
		IdfResults res = idf.calculate();
		
		System.out.println("=============================================");
		System.out.println("=== Eventos detectados:" + res.events.size() );
		System.out.println("=== Paso temporal:" + res.timeStepInMinutes );
		for( IdfEventResults event : res.events) {
			System.out.println("	===== Evento de " + event.indexIni + " a " + event.indexEnd + "========");
			System.out.println("	=== Precipitación:" + event.rainfall.size() );
			event.rainfall.stream().forEach(d -> System.out.print(String.format("%.2f ", d)) );System.out.println("");
			System.out.println("	=== Precipitación acumulada:" + event.accumRainfall.size() );
			event.accumRainfall.stream().forEach(d -> System.out.print(String.format("%.2f ", d)) );System.out.println("");
			
			for(int k = 0; k < event.idfMaxRainfall.size(); k++) {
				System.out.println("			rain(mm)=" + String.format("%.2f ", event.idfMaxRainfall.get(k)) + " d(HH):" + String.format("%.2f ", event.idfMaxRainfallAccumHours.get(k)) + " ORI:" + event.idfMaxRainfallOrigin.get(k) );
			}
		}
		
		System.out.println("Series compuestas de todo el intervalo");
		System.out.println("=== Precipitación: (" + res.rainfall.size() + " valores)");
		res.rainfall.stream().forEach(d -> System.out.print(String.format("%.2f ", d)) );System.out.println("");
		
		System.out.println("=== Precipitación máxima: (" + res.getMaxRainfall().size() + " valores)");
		res.getMaxRainfall().stream().forEach(d -> System.out.print(String.format("%.2f ", d)) );System.out.println("");
		
		System.out.println("=== MaxRainfallAccumHours: (" + res.getMaxRainfallAccumHours().size() + " valores)");
		res.getMaxRainfallAccumHours().stream().forEach(d -> System.out.print(String.format("%.2f ", d)) );System.out.println("");
		
		System.out.println("=== getMaxRainfallOrigin: (" + res.getMaxRainfallOrigin().size() + " valores)");
		res.getMaxRainfallOrigin().stream().forEach(d -> System.out.print(d + " ") );System.out.println("");
		
		
	}
	
	private static List<Double> GetObservedRainfallData() {
		//List<Double> ret = Arrays.asList( 0.1, 0.0, 0.7,3.1,0.4,0.2,0.2,2.5,2.1,1.0,0.4,1.7,2.3,0.9,1.2,1.3,0.8,1.1,1.2,0.9,1.6,1.1,1.7,1.3,0.8,1.9,1.7,0.9,0.7,0.4,1.4,0.8,1.0,1.2,1.2,1.0,1.2,0.6,0.8,1.1,1.0,1.3,0.6,0.3,0.1,0.2,0.0,0.0,0.3,0.3,0.1,0.4,0.1,0.3,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.9,0.7,0.2,0.5,1.0,1.4,0.6,2.7,3.0,1.0,0.9,0.9,0.9,2.5,1.6,0.5,0.4,0.7,0.6,0.6,0.5,0.7,1.0,0.2,0.5,1.2,1.1,0.5,0.5,0.4,0.1,0.1,0.7,1.3,2.8,1.6,2.5,2.5,2.7,1.0,1.4,0.9,0.7,3.1,0.4,0.2,0.2,2.5,2.1,1.0,0.4,1.7,2.3,0.9,1.2,1.3,0.8,1.1,1.2,0.9,1.6,1.1,1.7,1.3,0.8,1.9,1.7,0.9,0.7,0.4,1.4,0.8,1.0,1.2,1.2,1.0,1.2,0.6,0.8,1.1,1.0,1.3,0.6,0.3,0.1,0.2,0.0,0.0,0.3,0.3,0.1,0.4,0.1,0.3,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.9,0.7,0.2,0.5,1.0,1.4,0.6,2.7,3.0,1.0,0.9,0.9,0.9,2.5,1.6,0.5,0.4,0.7,0.6,0.6,0.5,0.7,1.0,0.2,0.5,1.2,1.1,0.5,0.5,0.4,0.1,0.1,0.7,1.3,2.8,1.6,2.5,2.5,2.7,1.0,1.4,0.9,0.7,3.1,0.4,0.2,0.2,2.5,2.1,1.0,0.4,1.7,2.3,0.9,1.2,1.3,0.8,1.1,1.2,0.9,1.6,1.1,1.7,1.3,0.8,1.9,1.7,0.9,0.7,0.4,1.4,0.8,1.0,1.2,1.2,1.0,1.2,0.6,0.8,1.1,1.0,1.3,0.6,0.3,0.1,0.2,0.0,0.0,0.3,0.3,0.1,0.4,0.1,0.3,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.9,0.7,0.2,0.5,1.0,1.4,0.6,2.7,3.0,1.0,0.9,0.9,0.9,2.5,1.6,0.5,0.4,0.7,0.6,0.6,0.5,0.7,1.0,0.2,0.5,1.2,1.1,0.5,0.5,0.4,0.1,0.1,0.7,1.3,2.8,1.6,2.5,2.5,2.7,1.0,1.4,0.9,0.7,3.1,0.4,0.2,0.2,2.5,2.1,1.0,0.4,1.7,2.3,0.9,1.2,1.3,0.8,1.1,1.2,0.9,1.6,1.1,1.7,1.3,0.8,1.9,1.7,0.9,0.7,0.4,1.4,0.8,1.0,1.2,1.2,1.0,1.2,0.6,0.8,1.1,1.0,1.3,0.6,0.3,0.1,0.2,0.0,0.0,0.3,0.3,0.1,0.4,0.1,0.3,0.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2,0.2,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.9,0.7,0.2,0.5,1.0,1.4,0.6,2.7,3.0,1.0,0.9,0.9,0.9,2.5,1.6,0.5,0.4,0.7,0.6,0.6,0.5,0.7,1.0,0.2,0.5,1.2,1.1,0.5,0.5,0.4,0.1,0.1,0.7,1.3,2.8,1.6,2.5,2.5,2.7,1.0,1.4,0.9,0.7,3.1,0.4,0.2,0.2,2.5,2.1,1.0,0.4,1.7,2.3,0.9,1.2,1.3,0.8 );
		//List<Double> ret = Arrays.asList( 2.0, 0.1,0.01,0.01, 0.01, 1.0, 0.0,0.0,0.0, 0.0,0.1, 0.0, 0.7,3.1,0.4,0.2,0.0,0.0,0.0,0.0,0.0,0.0,0.9 );
		
		// pluvio Agreda simulacro
		//List<Double> ret = Arrays.asList(0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.60,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,14.80,11.60,1.60,0.20,1.80,1.20,1.20,9.80,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.40,0.20,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.20,1.20,0.00,0.00,1.80,0.80,0.20,0.00,0.00,0.00,0.00,0.60,0.60,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2.00,0.80,5.60,1.00,0.40,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.20,2.80,1.40,0.60,0.00,0.00,0.00,0.00,0.00,0.00,0.00,10.60,4.20,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.60,1.00,0.80,1.60,1.60,1.00,0.60,0.20,0.00,0.00,0.20,0.20,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,0.20,0.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00);
		// cuenca P4
		List<Double> ret = Arrays.asList(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.0,0.03,0.1,0.11,0.08,0.01,0.01,0.0,0.0,0.03,0.01,0.0,0.0,0.0,0.0,0.0,0.01,0.06,0.02,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.03,0.03,0.03,0.03,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.06,0.0,0.0,0.0,0.0,0.0,0.0,0.22,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.01,0.03,0.02,0.08,0.1,0.11,0.1,0.06,0.02,0.02,0.01,0.02,0.0,0.0,0.01,0.02,0.08,0.2,0.13,0.15,0.16,0.23,0.28,0.5,0.6,0.56,0.54,0.42,0.11,0.07,0.03,0.04,0.03,0.06,0.05,0.05,0.03,0.04,0.04,0.03,0.08,0.02,0.03,0.02,0.05,0.03,0.01,0.07,0.0,0.02,0.03,0.02,0.04,0.02,0.1,0.02,0.1,0.02,0.04,0.08,0.04,0.09,0.09,0.04,0.1,0.05,0.04,0.05,0.03,0.09,0.02,0.02,0.03,0.02,0.03,0.04,0.03,0.03,0.03,0.02,0.0,0.01,0.06,0.03,0.02,0.02,0.01,0.04,0.03,0.04,0.09,0.07,0.02,0.01,0.06,0.03,0.04,0.04,0.06,0.16,0.08,0.21,0.35,0.29,0.17,0.1,0.03,0.08,0.06,0.18,0.03,0.03,0.08,0.01,0.02,0.02,0.02,0.01,0.01,0.02,0.06,0.0,0.01,0.01,0.02,0.01,0.01,0.02,0.04,0.04,0.02,0.01,0.02,0.0,0.01,0.03,0.04,0.05,0.05,0.04,0.04,0.05,0.03,0.06,0.01,0.07,0.09,0.1,0.19,0.19,0.07,0.07,0.01,0.05,0.04,0.01,0.01,0.01,0.07,0.02,0.03,0.01,0.03,0.05,0.06,0.04,0.04,0.02,0.02,0.01,0.03,0.01,0.0,0.0,0.0,0.0,0.0,0.01,0.02,0.02,0.03,0.01,0.01,0.01,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02,0.02,0.01,0.01,0.0,0.01,0.12,0.01,0.01,0.0,0.0,0.0,0.12,0.01,0.01,0.03,0.02,0.02,0.01,0.07,0.06,0.1,0.11,0.32,0.28,0.17,0.32,0.83,0.52,0.32,0.2,0.16,0.3,0.63,0.62,0.6,0.68,0.56,0.53,0.32,0.43,0.5,1.18,1.04,0.53,1.53,0.99,0.15,0.23,0.05,0.04,0.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.01,0.01,0.01,0.01,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.01,0.01,0.01,0.01,0.01,0.04,0.04,0.04,0.04,0.04,0.04,0.02,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.13,0.13,0.13,0.13,0.13,0.13,0.75,0.75,0.75,0.75,0.75,0.75,0.01,0.01,0.01,0.01,0.01,0.01,0.4,0.4,0.4,0.4,0.4,0.4,0.03,0.03,0.03,0.03,0.03,0.03,0.04,0.04,0.04,0.04,0.04,0.04,0.09,0.09,0.09,0.09,0.09,0.09,0.17,0.17,0.17,0.17,0.17,0.17,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.14,0.14,0.14,0.14,0.14,0.14,0.6,0.6,0.6,0.6,0.6,0.6,0.36,0.36,0.36,0.36,0.36,0.36,0.55,0.55,0.55,0.55,0.55,0.55,0.09,0.09,0.09,0.09,0.09,0.09,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.02,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04,0.04,0.04,0.04,0.04,0.04,0.7,0.7,0.7,0.7,0.7,0.7,0.56,0.56,0.56,0.56,0.56,0.56,0.68,0.68,0.68,0.68,0.68,0.68,0.46,0.46,0.46,0.46,0.46,0.46,0.03,0.03,0.03,0.03,0.03,0.03,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01,0.0,0.0,0.0,0.0);
		return ret;
	}
}